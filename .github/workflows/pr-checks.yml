name: PR Checks

on:
  pull_request:
    branches: [ main, master ]

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quick-validation:
    name: Quick Validation
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-quick-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-quick-
    
    - name: Resolve dependencies
      run: swift package resolve
    
    
    - name: Build all targets
      run: swift build --build-tests
    
    - name: Run core tests
      run: |
        echo "üß™ Running core functionality tests..."
        swift test --filter "ResourceManagerTests|DownloadPriorityTests"
        echo "‚úÖ Core tests completed"

  essential-tests:
    name: Essential Tests
    runs-on: macos-latest
    needs: quick-validation
    
    strategy:
      matrix:
        test-suite:
          - name: "Priority & Storage"
            filter: "DownloadPriorityTests|StorageDownloadTests"
          - name: "Memory & Cache"
            filter: "MemoryCacheTests|LocalCacheManagerTests"
          - name: "Manager & Integration"
            filter: "ResourceManagerTests|ResourceManagerIntegrationTests"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-essential-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-essential-
    
    - name: Build package
      run: swift build
    
    - name: Run ${{ matrix.test-suite.name }} tests
      run: |
        echo "üß™ Running ${{ matrix.test-suite.name }} tests..."
        swift test --filter "${{ matrix.test-suite.filter }}"
        echo "‚úÖ ${{ matrix.test-suite.name }} tests completed"

  build-verification:
    name: Build Verification
    runs-on: macos-latest
    needs: quick-validation
    
    strategy:
      matrix:
        config: [debug, release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ matrix.config }}-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-${{ matrix.config }}-
    
    - name: Build in ${{ matrix.config }} mode
      run: |
        echo "üî® Building in ${{ matrix.config }} mode..."
        swift build -c ${{ matrix.config }}
        echo "‚úÖ ${{ matrix.config }} build completed"
    
    - name: Check for warnings in ${{ matrix.config }} build
      if: matrix.config == 'debug'
      run: |
        echo "‚ö†Ô∏è Checking for build warnings..."
        swift build 2>&1 | tee build.log
        if grep -i "warning:" build.log; then
          echo "üü° Build warnings found:"
          grep -i "warning:" build.log
          # Don't fail on warnings for PR checks, just report them
        else
          echo "‚úÖ No build warnings found"
        fi

  ios-compatibility:
    name: iOS Compatibility Check
    runs-on: macos-latest
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4'
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-ios-compat-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-ios-compat-
    
    - name: Build for iOS Simulator
      run: |
        echo "üì± Building for iOS Simulator..."
        xcodebuild build-for-testing \
          -scheme DownloadKit \
          -destination "platform=iOS Simulator,name=iPhone 16,OS=18.0" \
          -derivedDataPath .build/ios \
          -skipPackagePluginValidation
        echo "‚úÖ iOS build completed"
    
    - name: Run basic iOS tests
      run: |
        echo "üì± Running basic iOS tests..."
        xcodebuild test-without-building \
          -scheme DownloadKit \
          -destination "platform=iOS Simulator,name=iPhone 16,OS=18.0" \
          -derivedDataPath .build/ios \
          -skipPackagePluginValidation \
          -only-testing:DownloadKitTests/AsyncPriorityQueueTests \
          -only-testing:DownloadKitTests/DownloadKitErrorTests
        echo "‚úÖ iOS tests completed"

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, essential-tests, build-verification, ios-compatibility]
    if: always()
    
    steps:
    - name: PR Check Summary
      run: |
        echo "## üîç Pull Request Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Quick validation status
        if [[ "${{ needs.quick-validation.result }}" == "success" ]]; then
          echo "‚úÖ **Quick Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Quick Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Essential tests status
        if [[ "${{ needs.essential-tests.result }}" == "success" ]]; then
          echo "‚úÖ **Essential Tests**: All test suites passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Essential Tests**: Some test suites failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Build verification status
        if [[ "${{ needs.build-verification.result }}" == "success" ]]; then
          echo "‚úÖ **Build Verification**: Debug and Release builds successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Build Verification**: Build issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        # iOS compatibility status
        if [[ "${{ needs.ios-compatibility.result }}" == "success" ]]; then
          echo "‚úÖ **iOS Compatibility**: iOS builds and tests successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **iOS Compatibility**: iOS compatibility issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ "${{ needs.quick-validation.result }}" == "success" && \
              "${{ needs.essential-tests.result }}" == "success" && \
              "${{ needs.build-verification.result }}" == "success" && \
              "${{ needs.ios-compatibility.result }}" == "success" ]]; then
          echo "üéâ **All PR checks passed!** This pull request is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Some PR checks failed.** Please review and fix the issues before requesting review." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- If all checks pass: Request code review" >> $GITHUB_STEP_SUMMARY
        echo "- If checks fail: Fix issues and push new commits" >> $GITHUB_STEP_SUMMARY
        echo "- Full test suite will run when merged to main branch" >> $GITHUB_STEP_SUMMARY

    - name: Set PR status
      if: needs.quick-validation.result == 'failure' || needs.essential-tests.result == 'failure' || needs.build-verification.result == 'failure' || needs.ios-compatibility.result == 'failure'
      run: |
        echo "‚ùå PR checks failed - blocking merge"
        exit 1
