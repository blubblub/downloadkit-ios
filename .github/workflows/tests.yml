name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-macos:
    name: Test on macOS
    runs-on: macos-15
    
    strategy:
      matrix:
        swift-version: ['6.0']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4'
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift-version }}
    
    
    - name: Build for macOS
      run: |
        xcodebuild build-for-testing \
          -scheme DownloadKit \
          -destination "platform=macOS" \
          -derivedDataPath .build/macos \
          -skipPackagePluginValidation
    
    - name: Run tests on macOS
      run: |
        xcodebuild test-without-building \
          -scheme DownloadKit \
          -destination "platform=macOS" \
          -derivedDataPath .build/macos \
          -skipPackagePluginValidation \
          -enableCodeCoverage YES
    
    - name: Generate code coverage report
      if: matrix.swift-version == '6.0'
      run: |
        xcrun xccov view --report --json .build/macos/Logs/Test/*.xcresult > coverage.json
        # Convert xccov JSON to lcov format if needed
        echo "Coverage report generated"
    
    - name: Upload coverage reports to Codecov
      if: matrix.swift-version == '6.0'
      uses: codecov/codecov-action@v4
      with:
        file: coverage.json
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-ios-simulator:
    name: Test on iOS Simulator
    runs-on: macos-15
    
    strategy:
      matrix:
        simulator:
          - name: "iPhone 16"
            os: "18.0"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4'
    
    
    - name: List available simulators
      run: xcrun simctl list devices available
    
    - name: Build for iOS
      run: |
        xcodebuild build-for-testing \
          -scheme DownloadKit \
          -destination "platform=iOS Simulator,name=${{ matrix.simulator.name }},OS=${{ matrix.simulator.os }}" \
          -derivedDataPath .build/ios \
          -skipPackagePluginValidation
    
    - name: Test on iOS Simulator
      run: |
        xcodebuild test-without-building \
          -scheme DownloadKit \
          -destination "platform=iOS Simulator,name=${{ matrix.simulator.name }},OS=${{ matrix.simulator.os }}" \
          -derivedDataPath .build/ios \
          -skipPackagePluginValidation

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-macos, test-ios-simulator]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| macOS Tests | ${{ needs.test-macos.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| iOS Simulator Tests | ${{ needs.test-ios-simulator.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test-macos.result }}" == "success" && \
              "${{ needs.test-ios-simulator.result }}" == "success" ]]; then
          echo "🎉 **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The DownloadKit library is ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some tests failed.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed test jobs and fix any issues before merging." >> $GITHUB_STEP_SUMMARY
        fi
